/* Как в тетрисе
Планируя хорошо провести вечер в своём любимом ресторане на Марсе, вы сталкиваетесь с бичом звездной цивилизации - парковкой.

Заняв последнее свободное место, вы задумываетесь - неужели все должно быть настолько плохо? И действительно, если приглядеться, между звездолетами уйма неиспользованного места!

Администратор ресторана поражен вашим наблюдением и умоляет вас помочь: нужно реализовать программу, которая бы укомплектовала все корабли максимально эффективным образом. Самое время отплатить за гостеприимство любимом ресторану.

Условия:

Напишите функцию parking, которая будет заполнять эту парковку таким образом, чтобы не образовывались пустоты

Парковка на вход принимает массив уникальных кораблей

Парковка может быть разной ширины

Корабль имеет свой уникальный номер

Форма корабля произвольная, ширина всегда равна ширине парковки

Корабли имеют возможность развернуться (заехать задом или передом), чтобы заехать на парковку

После того, как все корабли припаркуются, на парковке не должно остаться пустот

Парковка всегда заполняется полностью (висящих пустот на любом наборе данных не будет)

Функция должна возвращать отчёт о порядке заезда кораблей и манипуляций с их поворотами.


module.exports = function parking(ships) { /* ...  }
interface Ship {
    id: number;
    form: number[][];
}

interface ParkResult {
    shipId: number;
    position: number;
    isRotated: boolean;
}

function parking(ships: Ship[]): ParkResult[]  {
    // code
}


const ships = [{
    "id": 738,
    "form": [
        [1, 0],
        [1, 1]
    ]
},
    {
        "id": 841,
        "form": [
            [1, 1],
            [0, 1]
        ]
    }];

const result = [
    {
        "shipId": 738,
        "position": 1,
        "isRotated": false
    },
    {
        "shipId": 841,
        "position": 2,
        "isRotated": false
    }
];

const ships = [{
    "id": 1,
    "form": [
        [1, 0, 1],
        [1, 1, 1],
        [1, 1, 1]
    ]
},
    {
        "id": 2,
        "form": [
            [0, 0, 1],
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1]
        ]
    },
    {
        "id": 3,
        "form": [
            [0, 1, 1],
            [1, 1, 1],
            [0, 1, 0]
        ]
    }];

const result = [
    {
        "shipId": 1,
        "position": 1,
        "isRotated": false
    },
    {
        "shipId": 3,
        "position": 2,
        "isRotated": false
    },
    {
        "shipId": 2,
        "position": 3,
        "isRotated": true
    }
];

*/
