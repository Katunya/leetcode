

// 1.5 Существуют три вида модифицирующих операций со строками: вставка
// символа, удаление символа и замена символа. Напишите функцию, которая проверяет, находятся ли две строки на расстоянии одной модификации (или нуля модификаций).
//
// Пример:
// pale, ple -> true
// pales, pale -> true
// pale, bale -> true
// pale, bake -> false


//1.6 Реализуйте метод, осуществляющий сжатие строки на основе счетчика повторяющихся символов.
// Например, строка aaabbcccc должна превратиться в a3b2c5.
// Если сжатая строка оказалась длиннее исходной, то результатом работы алгоритма должна быть исходная строка.
// Решить задачу с предположением, что в исходной строке нет цифр. Решить задачи для произвольной строки.

const counter = (symbol, num) => {
    if( num > 1) {
        return symbol + num.toString();
    }
    return symbol
}

const rle = (str) => {
    if(!str) return str
    let lastSymbol = str[0];
    let lastPosition = 0
    let ans = [];
    for(let i = 0; i < str.length; i++) {
        if(lastSymbol !== str[i]) {
            ans.push(counter(lastSymbol, i - lastPosition));
            lastPosition = i;
            lastSymbol = str[i];
        }
    }

    ans.push(counter(lastSymbol, str.length - lastPosition));
    return ans.join('');
}

console.log(rle('aaabbccccc')); // a3b2c5
console.log(rle('abc')); // a3b2c5
console.log(rle(' ')); // ''

//1.7 Имеется изображение, представленное матрицей NxN;
// каждый пиксел представлен 4 байтами. Напишите метод для поворота изображения на 90 градусов.
// Удастся ли вам выполнить эту операцию «На месте»?

//1.8 Допустим, что существует метод
//  isSubstring, проверяющий, является ли одно слово подстрокой другого. Для двух
//  строк, s1 и s2, напишите код проверки, получена ли строка s2 циклическим
//  сдвигом s1, используя только один вызов метода isSubstring (пример: слово
//  waterbottle получено циклическим сдвигом erbottlewat
